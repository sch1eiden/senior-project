{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\senior-project\\\\webapp\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\senior-project\\\\webapp\\\\frontend\\\\src\\\\components\\\\binGraph.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport moment from 'moment';\nconst API_URL = 'https://firestore.googleapis.com/v1/projects/smart-bin-615ec/databases/(default)/documents/amounts';\nconst GLASS_API = \"\".concat(API_URL, \"/glass/days\");\nconst ALUMINIUM_API = \"\".concat(API_URL, \"/aluminium/days\");\nconst PAPER_API = \"\".concat(API_URL, \"/paper/days\");\nconst PLASTIC_API = \"\".concat(API_URL, \"/plastic/days\");\n\nconst BinGraph = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        binLine = _useState2[0],\n        setBinLine = _useState2[1];\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const resGlass = await axios(GLASS_API);\n      const resAluminium = await axios(ALUMINIUM_API);\n      const resPaper = await axios(PAPER_API);\n      const resPlastic = await axios(PLASTIC_API); // Glass\n\n      const glass = resGlass.data.documents;\n      const glassDate = [];\n      const glassAmount = [];\n      glass.forEach(element => {\n        let new_date = moment(element.fields.date.timestampValue).format('DD/MM/YYYY');\n        glassDate.push(new_date);\n        glassAmount.push(element.fields.amount.integerValue);\n      }); // Aluminium Can\n\n      const aluminium = resAluminium.data.documents;\n      const aluminiumDate = [];\n      const aluminiumAmount = [];\n      aluminium.forEach(element => {\n        let new_date = moment(element.fields.date.timestampValue).format('DD/MM/YYYY');\n        aluminiumDate.push(new_date);\n        aluminiumAmount.push(element.fields.amount.integerValue);\n      }); // Paper\n\n      const paper = resPaper.data.documents;\n      const paperDate = [];\n      const paperAmount = [];\n      paper.forEach(element => {\n        let new_date = moment(element.fields.date.timestampValue).format('DD/MM/YYYY');\n        paperDate.push(new_date);\n        paperAmount.push(element.fields.amount.integerValue);\n      }); // Plastic\n\n      const plastic = resPlastic.data.documents;\n      const plasticDate = [];\n      const plasticAmount = [];\n      plastic.forEach(element => {\n        let new_date = moment(element.fields.date.timestampValue).format('DD/MM/YYYY');\n        plasticDate.push(new_date);\n        plasticAmount.push(element.fields.amount.integerValue);\n      });\n      setBinLine({\n        labels: glassDate,\n        datasets: [{\n          label: 'Aluminium Can',\n          fill: false,\n          borderColor: 'rgba(219, 10, 91, 0.6)',\n          pointBorderColor: \"black\",\n          pointBackgroundColor: 'rgba(219, 10, 91, 0.6)',\n          lineTension: 0,\n          data: aluminiumAmount,\n          backgroundColor: ['rgba(219, 10, 91, 0.6)']\n        }, {\n          label: 'Glass',\n          fill: false,\n          borderColor: 'rgba(25, 181, 254, 0.6)',\n          pointBorderColor: \"black\",\n          pointBackgroundColor: 'rgba(25, 181, 254, 0.6)',\n          data: glassAmount,\n          lineTension: 0,\n          backgroundColor: ['rgba(25, 181, 254, 0.6)']\n        }, {\n          label: 'Paper',\n          fill: false,\n          borderColor: 'rgba(245, 229, 27, 0.6)',\n          pointBorderColor: \"black\",\n          pointBackgroundColor: 'rgba(245, 229, 27, 0.6)',\n          lineTension: 0,\n          data: paperAmount,\n          backgroundColor: ['rgba(245, 229, 27, 0.6)']\n        }, {\n          label: 'Plastic',\n          fill: false,\n          borderColor: 'rgba(27, 163, 156, 0.6)',\n          pointBorderColor: \"black\",\n          pointBackgroundColor: 'rgba(27, 163, 156, 0.6)',\n          lineTension: 0,\n          data: plasticAmount,\n          backgroundColor: ['rgba(27, 163, 156, 0.6)']\n        }]\n      });\n    };\n\n    fetchData();\n  }, []);\n  const options = {\n    responsive: true,\n    legend: {\n      display: true\n    },\n    tooltips: {\n      enabled: true\n    },\n    scales: {\n      xAxes: [{\n        ticks: {\n          beginAtZero: true\n        }\n      }],\n      yAxes: [{\n        display: true,\n        ticks: {\n          beginAtZero: true,\n          suggestedMax: 100\n        }\n      }]\n    }\n  };\n  return React.createElement(\"div\", {\n    id: \"BinGraph\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(Line, {\n    data: binLine,\n    options: options,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }));\n};\n\nexport default BinGraph;","map":{"version":3,"sources":["C:\\Users\\User\\Documents\\GitHub\\senior-project\\webapp\\frontend\\src\\components\\binGraph.js"],"names":["React","useState","useEffect","axios","Line","moment","API_URL","GLASS_API","ALUMINIUM_API","PAPER_API","PLASTIC_API","BinGraph","binLine","setBinLine","fetchData","resGlass","resAluminium","resPaper","resPlastic","glass","data","documents","glassDate","glassAmount","forEach","element","new_date","fields","date","timestampValue","format","push","amount","integerValue","aluminium","aluminiumDate","aluminiumAmount","paper","paperDate","paperAmount","plastic","plasticDate","plasticAmount","labels","datasets","label","fill","borderColor","pointBorderColor","pointBackgroundColor","lineTension","backgroundColor","options","responsive","legend","display","tooltips","enabled","scales","xAxes","ticks","beginAtZero","yAxes","suggestedMax"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Line } from 'react-chartjs-2';\r\nimport moment from 'moment';\r\n\r\nconst API_URL = 'https://firestore.googleapis.com/v1/projects/smart-bin-615ec/databases/(default)/documents/amounts';\r\nconst GLASS_API = `${API_URL}/glass/days`;\r\nconst ALUMINIUM_API = `${API_URL}/aluminium/days`;\r\nconst PAPER_API = `${API_URL}/paper/days`;\r\nconst PLASTIC_API = `${API_URL}/plastic/days`;\r\n\r\nconst BinGraph = () => {\r\n    const [binLine, setBinLine] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n\r\n            const resGlass = await axios(GLASS_API);\r\n            const resAluminium = await axios(ALUMINIUM_API);\r\n            const resPaper = await axios(PAPER_API);\r\n            const resPlastic = await axios(PLASTIC_API);\r\n\r\n            // Glass\r\n            const glass = resGlass.data.documents;\r\n            const glassDate = [];\r\n            const glassAmount = [];\r\n            glass.forEach(element => {\r\n                let new_date = moment(element.fields.date.timestampValue).format('DD/MM/YYYY');\r\n                glassDate.push(new_date);\r\n                glassAmount.push(element.fields.amount.integerValue);\r\n            });\r\n            // Aluminium Can\r\n            const aluminium = resAluminium.data.documents;\r\n            const aluminiumDate = [];\r\n            const aluminiumAmount = [];\r\n            aluminium.forEach(element => {\r\n                let new_date = moment(element.fields.date.timestampValue).format('DD/MM/YYYY');\r\n                aluminiumDate.push(new_date);\r\n                aluminiumAmount.push(element.fields.amount.integerValue);\r\n            });\r\n            // Paper\r\n            const paper = resPaper.data.documents;\r\n            const paperDate = [];\r\n            const paperAmount = [];\r\n            paper.forEach(element => {\r\n                let new_date = moment(element.fields.date.timestampValue).format('DD/MM/YYYY');\r\n                paperDate.push(new_date);\r\n                paperAmount.push(element.fields.amount.integerValue);\r\n            });\r\n            // Plastic\r\n            const plastic = resPlastic.data.documents;\r\n            const plasticDate = [];\r\n            const plasticAmount = [];\r\n            plastic.forEach(element => {\r\n                let new_date = moment(element.fields.date.timestampValue).format('DD/MM/YYYY');\r\n                plasticDate.push(new_date);\r\n                plasticAmount.push(element.fields.amount.integerValue);\r\n            });\r\n\r\n            setBinLine({\r\n                labels: glassDate,\r\n                datasets:[\r\n                    {\r\n                        label: 'Aluminium Can',\r\n                        fill: false,\r\n                        borderColor: 'rgba(219, 10, 91, 0.6)',\r\n                        pointBorderColor: \"black\",\r\n                        pointBackgroundColor: 'rgba(219, 10, 91, 0.6)',\r\n                        lineTension: 0,\r\n                        data: aluminiumAmount,\r\n                        backgroundColor:[\r\n                            'rgba(219, 10, 91, 0.6)',\r\n                        ]\r\n                    },\r\n                    {\r\n                        label: 'Glass',\r\n                        fill: false,\r\n                        borderColor: 'rgba(25, 181, 254, 0.6)',\r\n                        pointBorderColor: \"black\",\r\n                        pointBackgroundColor: 'rgba(25, 181, 254, 0.6)',\r\n                        data: glassAmount,\r\n                        lineTension: 0,\r\n                        backgroundColor:[\r\n                            'rgba(25, 181, 254, 0.6)',\r\n                        ]\r\n                    },\r\n                    {\r\n                        label: 'Paper',\r\n                        fill: false,\r\n                        borderColor: 'rgba(245, 229, 27, 0.6)',\r\n                        pointBorderColor: \"black\",\r\n                        pointBackgroundColor: 'rgba(245, 229, 27, 0.6)',\r\n                        lineTension: 0,\r\n                        data: paperAmount,\r\n                        backgroundColor:[\r\n                            'rgba(245, 229, 27, 0.6)',\r\n                        ]\r\n                    },\r\n                    {\r\n                        label: 'Plastic',\r\n                        fill: false,\r\n                        borderColor: 'rgba(27, 163, 156, 0.6)',\r\n                        pointBorderColor: \"black\",\r\n                        pointBackgroundColor: 'rgba(27, 163, 156, 0.6)',\r\n                        lineTension: 0,\r\n                        data: plasticAmount,\r\n                        backgroundColor:[\r\n                            'rgba(27, 163, 156, 0.6)',\r\n                        ]\r\n                    },\r\n                ]\r\n            });\r\n        };\r\n        fetchData();\r\n    }, []);\r\n\r\n    const options = {\r\n        responsive: true,\r\n        legend: {\r\n            display: true,\r\n        },\r\n        tooltips: {\r\n            enabled: true,\r\n        },\r\n        scales: {\r\n            xAxes:[{\r\n                ticks:{\r\n                    beginAtZero:true\r\n                },\r\n            }],\r\n            yAxes:[{\r\n                display:true,\r\n                ticks: {\r\n                    beginAtZero:true,\r\n                    suggestedMax: 100,\r\n                }\r\n            }]\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id=\"BinGraph\">\r\n            <Line\r\n            data = {binLine}\r\n            options = {options}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default BinGraph;"]},"metadata":{},"sourceType":"module"}